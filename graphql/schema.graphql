directive @keys(fields: String!) on OBJECT

schema @link(url: "https://specs.apollo.dev/federation/v2.3", import: ["@key", "@shareable"]) {
  query: Query
  mutation: Mutation
}

input AssemblyAddInput {
  source: String = null
  metaFields: JSON = null
  unit: GraphQLAssemblyUnit!
  name: String!
  category: String!
  description: String = null
  lifeTime: Float = 50
  conversionFactor: Float = 1
}

input AssemblyFilters {
  id: FilterOptions = null
  name: FilterOptions = null
  category: FilterOptions = null
  lifeTime: FilterOptions = null
  description: FilterOptions = null
  source: FilterOptions = null
}

input AssemblyLayerInput {
  epdId: String!
  id: String = null
  name: String = null
  conversionFactor: Float = null
  referenceServiceLife: Int = null
  description: String = null
  transportEpdId: String = null
  transportDistance: Float = null
  transportConversionFactor: Float = 1
}

input AssemblyLayerUpdateInput {
  epdId: String!
  id: String!
  name: String = null
  conversionFactor: Float = null
  referenceServiceLife: Int = null
  description: String = null
  transportEpdId: String = null
  transportDistance: Float = null
  transportConversionFactor: Float = null
}

input AssemblyUpdateInput {
  source: String = null
  metaFields: JSON = null
  unit: GraphQLAssemblyUnit = null
  id: String!
  name: String = null
  category: String = null
  description: String = null
  lifeTime: Float = null
  conversionFactor: Float = null
}

"""Date (isoformat)"""
scalar Date

input EPDFilters {
  id: FilterOptions = null
  unit: FilterOptions = null
  name: FilterOptions = null
  category: FilterOptions = null
  source: FilterOptions = null
  type: FilterOptions = null
  region: FilterOptions = null
  owner: FilterOptions = null
  isTransport: FilterOptions = null
}

input EPDSort {
  name: SortOptions = null
  unit: SortOptions = null
  category: SortOptions = null
  source: SortOptions = null
  type: SortOptions = null
  region: SortOptions = null
  owner: SortOptions = null
  isTransport: SortOptions = null
}

input FilterOptions {
  equal: String = null
  contains: String = null
  startsWith: String = null
  endsWith: String = null
  isEmpty: Boolean = null
  isNotEmpty: Boolean = null
  isAnyOf: [String!] = null
  isTrue: Boolean = null
  jsonContains: String = null
}

input GraphQLAddEpdInput {
  id: String = null
  name: String!
  version: String!
  declaredUnit: GraphQLUnit!
  validUntil: Date!
  publishedDate: Date!
  source: JSON!
  location: String!
  subtype: String!
  referenceServiceLife: Int = null
  comment: String = null
  gwp: JSON = null
  odp: JSON = null
  ap: JSON = null
  ep: JSON = null
  pocp: JSON = null
  penre: JSON = null
  pere: JSON = null
  metaData: JSON = null
  conversions: JSON = null
}

type GraphQLAssembly {
  id: String!
  name: String!
  category: String!
  source: String!
  lifeTime: Float!
  conversionFactor: Float!
  description: String
  metaFields: JSON
  unit: GraphQLAssemblyUnit!
  layers: [GraphQLAssemblyLayer]!
  gwp(phases: [String!] = null): Float!
}

type GraphQLAssemblyLayer {
  id: String
  epd: GraphQLProjectEPD!
  epdId: String!
  name: String
  conversionFactor: Float
  referenceServiceLife: Int
  description: String
  transportEpd: GraphQLProjectEPD
  transportDistance: Float
  transportConversionFactor: Float!
}

enum GraphQLAssemblyUnit {
  m
  m2
  m3
  kg
  pcs
}

type GraphQLConversion {
  to: GraphQLUnit!
  value: Float!
}

type GraphQLEPD {
  id: String!
  name: String!
  version: String!
  declaredUnit: String
  validUntil: Date!
  publishedDate: Date!
  source: String!
  location: String!
  subtype: String!
  isTransport: Boolean!
  referenceServiceLife: Int
  comment: String
  metaFields: JSON
  conversions: [GraphQLConversion!]!
  gwp: GraphQLImpactCategories
  odp: GraphQLImpactCategories
  ap: GraphQLImpactCategories
  ep: GraphQLImpactCategories
  pocp: GraphQLImpactCategories
  penre: GraphQLImpactCategories
  pere: GraphQLImpactCategories
  originId: String
}

type GraphQLEPDBase {
  id: String!
  name: String!
  version: String!
  declaredUnit: String
  validUntil: Date!
  publishedDate: Date!
  source: String!
  location: String!
  subtype: String!
  isTransport: Boolean!
  referenceServiceLife: Int
  comment: String
  metaFields: JSON
  conversions: [GraphQLConversion!]!
  gwp: GraphQLImpactCategories
  odp: GraphQLImpactCategories
  ap: GraphQLImpactCategories
  ep: GraphQLImpactCategories
  pocp: GraphQLImpactCategories
  penre: GraphQLImpactCategories
  pere: GraphQLImpactCategories
}

type GraphQLEPDConnection {
  pageInfo: PageInfo!
  edges: [GraphQLEPDEdge!]!
  numEdges: Int!
}

type GraphQLEPDEdge {
  node: GraphQLEPD!
  cursor: String!
}

type GraphQLImpactCategories {
  a1a3: Float
  a4: Float
  a5: Float
  b1: Float
  b2: Float
  b3: Float
  b4: Float
  b5: Float
  b6: Float
  b7: Float
  c1: Float
  c2: Float
  c3: Float
  c4: Float
  d: Float
}

type GraphQLProjectAssembly {
  id: String!
  name: String!
  category: String!
  lifeTime: Float!
  conversionFactor: Float!
  description: String
  projectId: String!
  metaFields: JSON
  unit: GraphQLAssemblyUnit!
  layers: [GraphQLAssemblyLayer!]!
  gwp(phases: [String!] = null): Float!
}

type GraphQLProjectEPD @keys(fields: "project_id") {
  id: String!
  name: String!
  version: String!
  declaredUnit: String
  validUntil: Date!
  publishedDate: Date!
  source: String!
  location: String!
  subtype: String!
  isTransport: Boolean!
  referenceServiceLife: Int
  comment: String
  metaFields: JSON
  conversions: [GraphQLConversion!]!
  gwp: GraphQLImpactCategories
  odp: GraphQLImpactCategories
  ap: GraphQLImpactCategories
  ep: GraphQLImpactCategories
  pocp: GraphQLImpactCategories
  penre: GraphQLImpactCategories
  pere: GraphQLImpactCategories
  originId: String!
  assemblies: [GraphQLProjectAssembly!]
  projectId: ID! @shareable
}

type GraphQLSchemaElement @key(fields: "id") {
  id: ID!
  assemblyId: String @shareable
  assembly: GraphQLProjectAssembly
}

enum GraphQLUnit {
  M
  M2
  M3
  KG
  TONES
  PCS
  L
  M2R1
  TONES_KM
  UNKNOWN
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  """Add Global EPDs to a project."""
  addProjectEpds(projectId: String!, epdIds: [String!]!): [GraphQLProjectEPD!]!

  """Delete a project EPD"""
  deleteProjectEpds(ids: [String!]!): [String!]!

  """Add Global EPDs."""
  addEpds(epds: [GraphQLAddEpdInput!]!): [GraphQLEPD!]!

  """Delete a global EPD"""
  deleteEpds(ids: [String!]!): [String!]!

  """Add Project Assemblies"""
  addProjectAssemblies(assemblies: [ProjectAssemblyAddInput!]!): [GraphQLProjectAssembly!]!

  """Add Project Assemblies from Assemblies"""
  addProjectAssembliesFromAssemblies(assemblies: [ID!]!, projectId: ID!): [GraphQLProjectAssembly!]!

  """Update Project Assemblies"""
  updateProjectAssemblies(assemblies: [ProjectAssemblyUpdateInput!]!): [GraphQLProjectAssembly!]!

  """Delete Project Assemblies"""
  deleteProjectAssemblies(ids: [ID!]!): [ID!]!

  """Add layers to an Assembly"""
  addProjectAssemblyLayers(id: ID!, layers: [AssemblyLayerInput!]!): [GraphQLAssemblyLayer!]!

  """Delete layers from an Assembly"""
  deleteProjectAssemblyLayers(id: ID!, layers: [ID!]!): [String!]!
  updateProjectAssemblyLayers(id: ID!, layers: [AssemblyLayerUpdateInput!]!): [GraphQLAssemblyLayer!]!

  """Add Assemblies"""
  addAssemblies(assemblies: [AssemblyAddInput!]!): [GraphQLAssembly!]!

  """Update Assemblies"""
  updateAssemblies(assemblies: [AssemblyUpdateInput!]!): [GraphQLAssembly!]!

  """Delete Assemblies"""
  deleteAssemblies(ids: [ID!]!): [ID!]!

  """Add layers to an Assembly"""
  addAssemblyLayers(id: ID!, layers: [AssemblyLayerInput!]!): [GraphQLAssemblyLayer!]!

  """Delete layers from an Assembly"""
  deleteAssemblyLayers(id: ID!, layers: [ID!]!): [String!]!
  updateAssemblyLayers(id: ID!, layers: [AssemblyLayerUpdateInput!]!): [GraphQLAssemblyLayer!]!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input ProjectAssemblyAddInput {
  projectId: String!
  metaFields: JSON = null
  unit: GraphQLAssemblyUnit!
  name: String!
  category: String!
  description: String = null
  lifeTime: Float = 50
  conversionFactor: Float = 1
}

input ProjectAssemblyUpdateInput {
  metaFields: JSON = null
  unit: GraphQLAssemblyUnit = null
  id: String!
  name: String = null
  category: String = null
  description: String = null
  lifeTime: Float = null
  conversionFactor: Float = null
}

input ProjectEPDFilters {
  id: FilterOptions = null
  name: FilterOptions = null
  unit: SortOptions = null
  category: FilterOptions = null
  projectId: FilterOptions = null
  source: FilterOptions = null
  type: FilterOptions = null
  region: FilterOptions = null
  owner: FilterOptions = null
  isTransport: FilterOptions = null
}

type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!

  """Get assemblies"""
  assemblies(filters: AssemblyFilters = null): [GraphQLAssembly!]!

  """Get project assemblies"""
  projectAssemblies(projectId: String!, filters: AssemblyFilters = null): [GraphQLProjectAssembly!]!
  epds(filters: EPDFilters = null, sortBy: EPDSort = null, count: Int = 50, after: String): GraphQLEPDConnection!
  projectEpds(projectId: String!, filters: ProjectEPDFilters = null): [GraphQLProjectEPD!]!
}

enum SortOptions {
  ASC
  DSC
}

scalar _Any

union _Entity = GraphQLSchemaElement

type _Service {
  sdl: String!
}
