"""empty message

Revision ID: c4220702a2a1
Revises: 34bef80465c3
Create Date: 2023-06-20 13:04:30.985262

"""
import sqlalchemy as sa
import sqlmodel
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "c4220702a2a1"
down_revision = "34bef80465c3"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("epd", sa.Column("conversions", postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column("epd", sa.Column("gwp", postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column("epd", sa.Column("odp", postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column("epd", sa.Column("ap", postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column("epd", sa.Column("ep", postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column("epd", sa.Column("pocp", postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column("epd", sa.Column("penre", postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column("epd", sa.Column("pere", postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column("epd", sa.Column("declared_unit", sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column("epd", sa.Column("valid_until", sa.Date(), nullable=False))
    op.add_column("epd", sa.Column("published_date", sa.Date(), nullable=False))
    op.add_column("epd", sa.Column("location", sqlmodel.sql.sqltypes.AutoString(), nullable=False))
    op.add_column("epd", sa.Column("subtype", sqlmodel.sql.sqltypes.AutoString(), nullable=False))
    op.add_column("epd", sa.Column("comment", sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column("epd", sa.Column("reference_service_life", sa.Integer(), nullable=True))
    op.drop_column("epd", "expiration_date")
    op.drop_column("epd", "pocp_by_phases")
    op.drop_column("epd", "gwp_by_phases")
    op.drop_column("epd", "date_updated")
    op.drop_column("epd", "odp_by_phases")
    op.drop_column("epd", "category")
    op.drop_column("epd", "owner")
    op.drop_column("epd", "pere_by_phases")
    op.drop_column("epd", "ap_by_phases")
    op.drop_column("epd", "type")
    op.drop_column("epd", "ep_by_phases")
    op.drop_column("epd", "unit")
    op.drop_column("epd", "penre_by_phases")
    op.drop_column("epd", "source_data")
    op.drop_column("epd", "region")
    op.add_column("projectepd", sa.Column("conversions", postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column("projectepd", sa.Column("gwp", postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column("projectepd", sa.Column("odp", postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column("projectepd", sa.Column("ap", postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column("projectepd", sa.Column("ep", postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column("projectepd", sa.Column("pocp", postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column("projectepd", sa.Column("penre", postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column("projectepd", sa.Column("pere", postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column("projectepd", sa.Column("declared_unit", sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column("projectepd", sa.Column("valid_until", sa.Date(), nullable=False))
    op.add_column("projectepd", sa.Column("published_date", sa.Date(), nullable=False))
    op.add_column("projectepd", sa.Column("location", sqlmodel.sql.sqltypes.AutoString(), nullable=False))
    op.add_column("projectepd", sa.Column("subtype", sqlmodel.sql.sqltypes.AutoString(), nullable=False))
    op.add_column("projectepd", sa.Column("comment", sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column("projectepd", sa.Column("reference_service_life", sa.Integer(), nullable=True))
    op.drop_column("projectepd", "expiration_date")
    op.drop_column("projectepd", "pocp_by_phases")
    op.drop_column("projectepd", "region")
    op.drop_column("projectepd", "thickness")
    op.drop_column("projectepd", "gwp_by_phases")
    op.drop_column("projectepd", "date_updated")
    op.drop_column("projectepd", "odp_by_phases")
    op.drop_column("projectepd", "category")
    op.drop_column("projectepd", "owner")
    op.drop_column("projectepd", "kg_per_m3")
    op.drop_column("projectepd", "ap_by_phases")
    op.drop_column("projectepd", "pere_by_phases")
    op.drop_column("projectepd", "type")
    op.drop_column("projectepd", "unit")
    op.drop_column("projectepd", "ep_by_phases")
    op.drop_column("projectepd", "penre_by_phases")
    op.drop_column("projectepd", "source_data")
    op.drop_column("projectepd", "kg_per_m2")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "projectepd",
        sa.Column("kg_per_m2", postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    )
    op.add_column("projectepd", sa.Column("source_data", sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column(
        "projectepd",
        sa.Column("penre_by_phases", postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    )
    op.add_column(
        "projectepd",
        sa.Column("ep_by_phases", postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    )
    op.add_column("projectepd", sa.Column("unit", sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column("projectepd", sa.Column("type", sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column(
        "projectepd",
        sa.Column("pere_by_phases", postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    )
    op.add_column(
        "projectepd",
        sa.Column("ap_by_phases", postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    )
    op.add_column(
        "projectepd",
        sa.Column("kg_per_m3", postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    )
    op.add_column("projectepd", sa.Column("owner", sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column("projectepd", sa.Column("category", sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column(
        "projectepd",
        sa.Column("odp_by_phases", postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    )
    op.add_column("projectepd", sa.Column("date_updated", sa.DATE(), autoincrement=False, nullable=False))
    op.add_column(
        "projectepd",
        sa.Column("gwp_by_phases", postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    )
    op.add_column(
        "projectepd",
        sa.Column("thickness", postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    )
    op.add_column("projectepd", sa.Column("region", sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column(
        "projectepd",
        sa.Column("pocp_by_phases", postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    )
    op.add_column("projectepd", sa.Column("expiration_date", sa.DATE(), autoincrement=False, nullable=False))
    op.drop_column("projectepd", "reference_service_life")
    op.drop_column("projectepd", "comment")
    op.drop_column("projectepd", "subtype")
    op.drop_column("projectepd", "location")
    op.drop_column("projectepd", "published_date")
    op.drop_column("projectepd", "valid_until")
    op.drop_column("projectepd", "declared_unit")
    op.drop_column("projectepd", "pere")
    op.drop_column("projectepd", "penre")
    op.drop_column("projectepd", "pocp")
    op.drop_column("projectepd", "ep")
    op.drop_column("projectepd", "ap")
    op.drop_column("projectepd", "odp")
    op.drop_column("projectepd", "gwp")
    op.drop_column("projectepd", "conversions")
    op.add_column("epd", sa.Column("region", sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column("epd", sa.Column("source_data", sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column(
        "epd", sa.Column("penre_by_phases", postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True)
    )
    op.add_column("epd", sa.Column("unit", sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column(
        "epd", sa.Column("ep_by_phases", postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True)
    )
    op.add_column("epd", sa.Column("type", sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column(
        "epd", sa.Column("ap_by_phases", postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True)
    )
    op.add_column(
        "epd", sa.Column("pere_by_phases", postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True)
    )
    op.add_column("epd", sa.Column("owner", sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column("epd", sa.Column("category", sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column(
        "epd", sa.Column("odp_by_phases", postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True)
    )
    op.add_column("epd", sa.Column("date_updated", sa.DATE(), autoincrement=False, nullable=False))
    op.add_column(
        "epd", sa.Column("gwp_by_phases", postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True)
    )
    op.add_column(
        "epd", sa.Column("pocp_by_phases", postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True)
    )
    op.add_column("epd", sa.Column("expiration_date", sa.DATE(), autoincrement=False, nullable=False))
    op.drop_column("epd", "reference_service_life")
    op.drop_column("epd", "comment")
    op.drop_column("epd", "subtype")
    op.drop_column("epd", "location")
    op.drop_column("epd", "published_date")
    op.drop_column("epd", "valid_until")
    op.drop_column("epd", "declared_unit")
    op.drop_column("epd", "pere")
    op.drop_column("epd", "penre")
    op.drop_column("epd", "pocp")
    op.drop_column("epd", "ep")
    op.drop_column("epd", "ap")
    op.drop_column("epd", "odp")
    op.drop_column("epd", "gwp")
    op.drop_column("epd", "conversions")
    # ### end Alembic commands ###
